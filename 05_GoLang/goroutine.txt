* goroutine은 go 런타임에 의해 관리되는 경량 쓰레드임

package main

import (
	"fmt"
	"time"
)
func say(s string, p *int) {
	for i := 0; i < 5; i++ {
		time.Sleep(200 * time.Millisecond)
		(*p)++
		fmt.Println(s, *p)
		
	}
}

func main() {
	i := 0
	p := &i
	go say("world", p)
	say("hello", p)
}
같은 주소의 공간에서 실행되고 공유된 메모리는 동기적 해야한다.
위 코드 실행하면 어쩔때는 9까지가고 어쩔때는 10까지간다



*Channel
Channel은 당신이 채널 연산자인 <- 을 통해 값을 주고 받을 수 있는 하나의 분리된 통로이다.
ch <- v // 채널 ch에 v를 전송
v := <- ch // ch 로부터 값을 받고 값을 v에 대입

데이터는 화살표의 방향대로 흐른다
Channel은 사용되기 전에 map과 slice 처럼 사용하기 전에 생성되어야한다
ch := make(chan int)
기본적으로 전송과 수신은 다른 한 쪽이 준비될 때까지 block 상태이다
이는 명시적인 lock 이나 조건변수 없이 goroutine이 synchronous하게 작업될수있게한다
다음은 예시임

package main
import "fmt"

func sum(s []int, c chan int){
    sum := 0
    for _, v := range s{
        sum += v
    }
    c <- sum // send sum to c
}

func main(){
    s := []int{7,2,8,-9,4,0}

    c := make(chan int)
    go sum(s[:len(s)/2], c)
    go sum(s[len(s)/2:], c)
    x, y := <-c, <-c // receive from c

    fmt.Println(x, y, x+y)
}

위 코드와 같다 세부 실행사항은 콘솔찍어서 확인해봤는데
package main

import "fmt"

func sum(s []int, c chan int, name string) {
	fmt.Println(name, "start")
	sum := 0
	for _, v := range s {
		sum += v
	}
	c <- sum // send sum to c
	fmt.Println(name, "end")
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}

	c := make(chan int)
	go sum(s[:len(s)/2], c, "a")
	go sum(s[len(s)/2:], c, "b")
	x := <-c
	fmt.Println("pass x")
	y := <-c // receive from c
	fmt.Println("pass y")
	
	fmt.Println(x, y, x+y)
}

b start
b end
pass x
a start
a end
pass y
-5 17 12

고루틴은 스택사용하나보다.. 채널 실제로 넣어서 사용하는거는 고루틴 갯수만큼쓴걸로 보인다
기본적으로 전송과 송신은 다른 한 쪽이 준비될 때까지 block 상태임



* Buffered Channels (버퍼가 있는 채널)
채널은 버퍼될 수 있다
buffered channel 을 초기화하기 위해 make에 두번째 인자로 buffer 길이를 제공
ch := make(chan int, 100)

buffered channel 로의 전송은 그 buffer의 사이즈가 꽉 찼을때만 block 된다
buffer로부터의 수신은 그 buffer가 비어있을때 block 된다.
ex)
package main

import "fmt"
func main() {
	ch := make(chan int, 3)
	ch <- 1
	ch <- 2
	ch <- 3
	fmt.Println(<-ch)
	fmt.Println(<-ch)
	fmt.Println(<-ch)
}


* Range와 Close
전송자는 더 이상 보낼 데이터가 없다는 것을 암시하기 윟해 channel을 close할 수 있다.

package main

import (
	"fmt"
)

func fibonacci(n int, c chan int) {
	x, y := 0, 1
	for i := 0; i < n; i++ {
		c <- x
		x, y = y, x+y
	}
	close(c)
	fmt.Println("close")
}

func main() {
	c := make(chan int, 10)
	go fibonacci(cap(c), c)
	fmt.Println("for start")
	for i := range c {
		fmt.Println(i)
	}
}

오직 전송자만이 channel을 닫아야함
그리고 channel은 파일과 다름 보통 channel을 닫을 필요는 없으나
range 반복문을 종료시키는 것과 같이 수신자가 더 이상 들어오는 값이 없다는 것을 알아야하는 경우에만 필요




* select
select 문은 goroutine이 다중 커뮤니케이션 연산에서 대기할 수 있게 한다
select는 자식case들 중 하나가 실행될 때까지 block된다. 그리고나서 select문은 해당하는 case를 수행하고
만약 다수의 case가 준비되는 경우에는 select가 무작위로 하나를 선택한다.

package main
import "fmt"

func fibonacci(c, quit chan int){
    x, y := 0, 1
    for{
        select{
            case c <- x:
                x, y = y, x+y
            case <- quit:
                fmt.Println("quit")
                return
        }
    }
}

func main(){
    c := make(chan int)
    quit := make(chan int)

    go func() {
        for i := 0; i < 10; i++{
            fmt.Println(<-c)
        }
        quit <- 0
    }()
    fibonacci(c, quit)
}

// 로그포함
package main

import "fmt"

func fibonacci(c, quit chan int) {
	x, y := 0, 1
	for {
		select {
		case c <- x:
			x, y = y, x+y
			fmt.Println("calc")
		case <-quit:
			fmt.Println("quit")
			return
		}
	}
}

func main() {
	c := make(chan int)
	quit := make(chan int)
	fmt.Println("ch ini")
	
	go func() {
		for i := 0; i < 10; i++ {
			fmt.Println(<-c)
		}
		quit <- 1
	}()
	
	fmt.Println("fibo")
	fibonacci(c, quit)
}

ch ini
fibo
0
calc
calc
1
1
calc
calc
2
3
calc
calc
5
8
calc
calc
13
21
calc
calc
34
quit


* default selection
select 에서의 default case 는 다른 case 들이 모두 준비되지 않았을때 실행된다
block 없이 전송이나 수신을 수행하도록 default case를 사용해보자
select{
    case i := <-c:
        // use i
    default :
        // c로부터 값을 받아오는 것이 block 된 경우
}

ex)
package main
import "fmt"
import "time"

func main(){
    tick := time.Tick(100 * time.Millisecond)
    boom := time.After(500 * time.Millisecond)

    for{
        select {
            case <- tick:
                fmt.Println("tick.")
            case <- boom:
                fmt.Println("boom!")
                return
            default:
                fmg.Println("   .")
                time.Sleep(50* time.Millisecond)
        }
    }
}
    .
    .
tick.
    .
    .
tick.
    .
    .
tick.
    .
    .
tick.
    .
    .
BOOM!


동일한 이진트리 체크 예제
package main

import "golang.org/x/tour/tree"

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int){
	if t != nil{
		Walk(t.Left, c)
		c <- t.Value
		Walk(t.Right, c)
	}
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool{
	c1 := make(chan int)
	c2 := make(chan int)
	
	go Walk(t1, c1)
	go Walk(t2, c2)
	for i := 0; i < 10; i++{
		if <-c1 != <-c2{
			return false
		}
	}
	return true
}

func main() {
}



* sync.Mutex
충돌을 피하기 위해 단순히 오직 하나의 goroutine만이 공유변수에 접근할 수 있도록하려면은
mutual exclusion 이고 자료구조에서 보통 mutex라고 부른다
Go도 지원해준다 
sync 패키지의 sync.Mutex 이다 Mutex는 Lock 과 Unlock 함수로 상호배제 수행

ex)
package main
import (
    "fmt"
    "sync"
    "time"
)

// SafeCounter is safe to use concurrently
type SafeCounter struct {
    mu sync.Mutex
    v map[string]int
}

// Inc increments the counter for the given key
func (c *SafeCounter) Inc(key string){
    c.mu.Lock()
    // Lock on soly one goroutine at a tiem ca access the map c.v
    c.v[key]++
    c.mu.Unlock
}

// value returns the current value of the counter for the given key
func (c *SafeCounter) Value(key string) int{
    c.mu.Lock()
    // Lock so only one go routine at a tiem can access the map c.v
    defer.mu.Unlock() // unlock을 하기위해서 이것처럼 defer 사용 가능
    return c.v[key]
}

func main(){
    c := SafeCounter{v: make(map[string]int)}
    for i := 0; i< 1000; i++{
        go c.Inc("somekey")
    }
    time.Sleep(time.Second)
    fmt.Println(c.Value("somekey"))
}